// Question 3: MongoDB Aggregation Consider a MongoDB collection named sales
// Your task is to write an aggregation pipeline to calculate the total revenue generated by each store
// for each month, along with the average price of items sold. The result should be sorted first by store
// and then by month (in ascending order).

db.sales.aggregate([
    // 1. Unwind the items array so each item becomes a separate document
    {
      $unwind: "$items"
    },
  
    // 2. Set new fields: year, month, revenue (quantity * price), and quantity
    {
      $set: {
        year: { $year: "$date" }, // Extract year from the date
        month: { $month: "$date" }, // Extract month from the date
        revenue: { $multiply: ["$items.quantity", "$items.price"] }, // Calculate revenue per item
        quantity: "$items.quantity" // Keep quantity for later aggregation
      }
    },
  
    // 3. Group by store, year, and month to calculate total revenue and total quantity
    {
      $group: {
        _id: {
          store: "$store",
          year: "$year",
          month: "$month"
        },
        totalRevenue: { $sum: "$revenue" }, // Sum of revenue for the group
        totalQuantity: { $sum: "$quantity" } // Sum of quantities sold for the group
      }
    },
  
    // 4. Set new fields: formatted store, month string, and average price
    {
      $set: {
        store: "$_id.store", // Move store from _id to root
        month: {
          // Format month string as "YYYY-MM"
          $concat: [
            { $toString: "$_id.year" },
            "-",
            {
              $cond: {
                if: { $lt: ["$_id.month", 10] }, // Pad single-digit months with '0'
                then: { $concat: ["0", { $toString: "$_id.month" }] },
                else: { $toString: "$_id.month" }
              }
            }
          ]
        },
        averagePrice: {
          // Calculate average price = totalRevenue / totalQuantity, rounded to 2 decimal places
          $round: [
            {
              $cond: {
                if: { $eq: ["$totalQuantity", 0] }, // Avoid division by zero
                then: 0,
                else: { $divide: ["$totalRevenue", "$totalQuantity"] }
              }
            },
            2
          ]
        }
      }
    },
  
    // 5. Project final fields (exclude _id)
    {
      $project: {
        _id: 0,
        store: 1,
        month: 1,
        totalRevenue: 1,
        averagePrice: 1
      }
    },
  
    // 6. Sort results by store and month
    {
      $sort: {
        store: 1,
        month: 1
      }
    }
])
  